#!/usr/local/bin/ruby
require "fileutils"
require_relative 'readble_map_fixed.rb'

# Readable_i18n_key_map
current_folder = `pwd`.chomp
if current_folder.end_with? "ResourcesManager"
  current_folder = "#{current_folder}/scripts"
end
Current_folder = current_folder
Resource_folder = "#{Current_folder}/iina_i18n"
Parent_folder = File.dirname(Current_folder)
Output_folder = "#{Parent_folder}/Resources.bundle"
FileUtils.rm_rf Output_folder
FileUtils.mkdir Output_folder
Localizable_strings_file = "Localizable.strings"
Language_list = ["zh-Hans", "zh-Hant", "uk", "tr", "ru", "pl", "nl", "ko", "ja", "it", "fr", "es", "de", "en"]
Map_for_string_file = {"MainMenu.strings"=> "MainMenu", "PrefControlViewController.strings"=> "Pref", "InspectorWindowController.strings"=> "Inspector", "QuickSettingViewController.strings"=> "QuickSetting", "SubSelectWindowController.strings"=> "SubSelect", "HistoryWindowController.strings"=> "History", "FreeSelectingViewController.strings"=> "FreeSelecting", "CropSettingsViewController.strings"=> "CropSettings", "PlaylistViewController.strings"=> "Playlist", "FilterWindowController.strings"=> "Filter", "OpenURLAccessoryViewController.strings"=> "OpenURLAccessory", "AboutWindowController.strings"=> "About", "PrefGeneralViewController.strings"=> "PrefGeneral", "PrefKeyBindingViewController.strings"=> "PrefKeyBinding", "InitialWindowController.strings"=> "Initial", "PrefUIViewController.strings"=> "PrefUI", "PrefNetworkViewController.strings"=> "PrefNetwork", "FontPickerWindowController.strings"=> "FontPicker", "KeyRecordViewController.strings"=> "KeyRecord", "PrefAdvancedViewController.strings"=> "PrefAdvanced", "MainWindowController.strings"=> "Main", "PrefCodecViewController.strings"=> "PrefCodec", "PrefSubViewController.strings"=> "PrefSub", }

def run_parser
  Language_list.each do |lang|
    current = "#{Resource_folder}/#{lang}.lproj"
    output_lang_foder = "#{Output_folder}/#{lang}.lproj"
    FileUtils.mkdir output_lang_foder

    keyBinding_presets_file = "#{current}/KeyBinding.strings"
    if File.exists? keyBinding_presets_file
      FileUtils.cp(keyBinding_presets_file, "#{output_lang_foder}")
    end

    filter_presets_file = "#{current}/FilterPresets.strings"
    if File.exists? filter_presets_file
      FileUtils.cp(filter_presets_file, "#{output_lang_foder}")
    end

    contribution_file = "#{current}/Contribution.rtf"
    if File.exists? contribution_file
      FileUtils.cp(contribution_file, "#{output_lang_foder}")
    end

    output_file = "#{output_lang_foder}/Localizable.strings"
    preface = "// This file is auto-generated by i18n_localizeble_parser.rb, do not modify! \n"
    preface += "// Generated at " + Time.now.strftime("%d/%m/%Y %H:%M") + "\n\n"
    total_line = preface
    old_file = "#{current}/#{Localizable_strings_file}"

    File.open(old_file, "r") do |infile|
      start_common = false
      while (line = infile.gets)
        raw = line.gsub(/\n/,'')
        if line.start_with?("/*") == true
          if raw.end_with?("*/") == true
            next
          else
            start_common = true
          end
          next
        elsif (raw.end_with?("*/") == true) && (start_common == true)
          start_common = false
          next
        elsif start_common == true || (line.start_with?("//") == true) || line == "\n"
          next
        end
        values = line.split("\" = \"")
        if values.count == 1
          values = line.split("\"= \"")
        end
        if values.count == 1
          values = line.split("\"=\"")
        end
        if values.count == 1
          values = line.split("\" =\"")
        end
        if values.count == 1
          # puts "skip this one: #{line}"
          next
        end
        raw_key_components = values[0].gsub(/"/, '').split(".")
        raw_key_components = raw_key_components.collect { |x|
          raw_values = x.split("_")
          raw_hyphen_values = x.split("-")
          if raw_values.count >= 2
            ret = raw_values.collect{ |r| r.capitalize }
            ret.join("")
          elsif raw_hyphen_values.count >= 2
            ret = raw_hyphen_values.collect{ |r| r.capitalize }
            ret.join("")
          else
            x.capitalize
          end
        }
        raw_key = raw_key_components.join(".")
        # puts raw_key
        total_line += "\"#{raw_key}\" = \"#{values[1]}"
      end#while

    end#File.open

    files = Dir["#{current}/*.strings"]
    files.each do |file|

      name = File.basename(file)
      prefix_name = Map_for_string_file[name]
      total_line += "\n// #{name}\n"
      if prefix_name == nil
        next
      end
      File.open(file, "r") do |infile|
        start_common = false
        while (line = infile.gets)
          raw = line.gsub(/\n/,'').gsub(/IINA/,'Leaf')
          if line.start_with?("/*") == true
            if raw.end_with?("*/") == true
              next
            else
              start_common = true
            end

            next
          elsif (raw.end_with?("*/") == true) && (start_common == true)
            start_common = false
            next
          elsif start_common == true || (line.start_with?("//") == true) || line == "\n"
            next
          end
          values = line.split("\" = \"")
          if values.count == 1
            values = line.split("\"= \"")
          end
          if values.count == 1
            values = line.split("\"=\"")
          end
          if values.count == 1
            values = line.split("\" =\"")
          end
          if values.count == 1
            # puts "skip this one: #{line}"
            next
          end
          raw_key = values[0].gsub(/"/, '')
          readble_key = Readable_i18n_key_map["#{prefix_name}.#{raw_key}"]
          if readble_key == nil
            readble_key = Readable_i18n_key_map[raw_key]
          end
          if readble_key == nil
            puts "no readable key for #{raw_key} in #{name}"
            next
          end
          lang_value = values[1].gsub(/"/,'').gsub(/\n/,'').gsub(/;/,'').gsub(/IINA/, 'Leaf')
          total_line += "\"#{readble_key}\" = \"#{lang_value}\";\n"
        end#while
      end#File.open

    end
    open(output_file, 'w') { |f|
      f.puts total_line
    }
  end
end

run_parser

Swift_generator = "LaurineGenerator.swift"
input = "#{Output_folder}/zh-Hant.lproj/Localizable.strings"
output_folder = "#{Parent_folder}/Sources/generated"
output = "#{output_folder}/I18N.swift"
FileUtils.mkdir_p output_folder
base_class_name = "I18N"
puts output
system("#{Current_folder}/#{Swift_generator} -i #{input} -o #{output} -b #{base_class_name}")
